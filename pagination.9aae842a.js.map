{"mappings":"AAGA,SAASA,EAAqBC,EAAKC,GAC/B,MAAMC,EAASF,EAAIG,KAAI,EAACC,IAAEA,EAAGC,WAAEA,EAAUC,MAAEA,EAAKC,OAAEA,EAAMC,YAAEA,KACtD,wCAEeJ,mGAEKC,WAAoBC,0CAC1BA,wCACSC,6BACVC,2EAKfC,KAAK,IAEPR,EAAKS,mBAAmB,YAAaR,E,CCbzC,MAAMS,EAAOC,SAASC,cAAc,gBAC9BC,EAAaF,SAASC,cAAc,YACpCE,EAAYH,SAASC,cAAc,eAGnCG,EAAiB,ICPR,MACXC,cACIC,KAAKC,MAAQ,GACbD,KAAKE,KAAO,EACZF,KAAKG,SAAW,C,CAGpBC,gBAEI,OAAOC,MAAM,+EAA+CL,KAAKC,kBAAkBD,KAAKG,iBAAiBH,KAAKE,QAC7GI,MAAKC,IACF,IAAKA,EAAKC,GACN,MAAM,IAAIC,MAAMF,EAAKG,YAE7B,OAAOH,EAAKI,MAAM,IACfL,MAAK,EAACM,SAACA,MACNZ,KAAKa,gBAEED,I,CAIfC,gBACIb,KAAKE,MAAQ,C,CAGjBY,YACId,KAAKE,KAAO,C,CAGZa,kBACA,OAAOf,KAAKC,K,CAGZc,gBAAYC,GACZhB,KAAKC,MAAQe,C,GD3BfC,EAAc,IEZL,MACXlB,aAAYmB,SAACA,EAAQC,OAAEA,GAAO,IAC1BnB,KAAKoB,IAAM1B,SAASC,cAAcuB,GAClClB,KAAKqB,MAAQrB,KAAKoB,IAAIzB,cAAc,qBACpCK,KAAKsB,QAAUtB,KAAKoB,IAAIzB,cAAc,eAEtCwB,GAAUnB,KAAKuB,M,CAOnBC,gBACIxB,KAAKsB,QAAQH,QAAS,EACtBnB,KAAKqB,MAAMI,YAAc,aACzBzB,KAAKoB,IAAIM,UAAW,C,CAGxBC,iBACI3B,KAAKsB,QAAQH,QAAS,EACtBnB,KAAKqB,MAAMI,YAAc,eACzBzB,KAAKoB,IAAIM,UAAW,C,CAGxBE,OACI5B,KAAKoB,IAAID,QAAS,C,CAGtBI,OACIvB,KAAKoB,IAAID,QAAS,C,GFjBtB,CACID,SAAU,gBACVC,QAAQ,IA6BhB,SAASU,IACLZ,EAAYO,gBAEZ1B,EAAeM,gBACVE,MAAKM,IACFK,EAAYU,iBACZ9C,EAAqB+B,EAAUnB,GAC/BI,EAAU6B,UAAW,CAAK,IAE7BI,OAAMC,GAAOC,QAAQC,IAAIF,I,CAjClCnC,EAAWsC,iBAAiB,UAI5B,SAAkBC,GAOd,GANAA,EAAEC,iBAEFvC,EAAU6B,UAAW,EAErB5B,EAAeG,MAAQkC,EAAEE,cAAcC,SAASrC,MAAMsC,OAEjDzC,EAAeG,MAChB,OAAOuC,MAAM,kBAGjBvB,EAAYW,OACZ9B,EAAegB,YDbU/B,ECcLU,EDbpBV,EAAK0D,UAAY,GCcjBZ,IDfJ,IAA6B9C,C,ICF7BkC,EAAYG,IAAIc,iBAAiB,QAASL","sources":["src/js/REP-markup.js","src/js/pagination.js","src/js/REP-api-service.js","src/js/REP-loadBtn.js"],"sourcesContent":["export { appendArticlesMarkup, clearArticlesMarkup }\n\n\nfunction appendArticlesMarkup(arr, list) {\n    const markup = arr.map(({ url, urlToImage, title, author, description }) =>\n        `\n        <li>\n            <a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <article>\n                <img src=\"${urlToImage}\" alt=\"${title}\" width=\"480\" />\n                <h2>${title}</h2>\n                <p>Posted by:${author}</p>\n                <p>${description}</p>\n            </article>\n            </a>\n      </li>\n        `\n    ).join('');\n\n    list.insertAdjacentHTML('beforeend', markup);\n}\n\n\nfunction clearArticlesMarkup(list) {\n    list.innerHTML = '';\n}","// <!--newsapi load more class-->\nimport NewsApiService from './REP-api-service';\nimport { appendArticlesMarkup, clearArticlesMarkup } from './REP-markup';\nimport LoadMoreBtn from './REP-loadBtn';\n\n\nconst list = document.querySelector('.js-list-rep');\nconst searchForm = document.querySelector('.js-form');\nconst searchBtn = document.querySelector('.search-btn');\n\n\nconst newsApiService = new NewsApiService();\nconst loadMoreBtn = new LoadMoreBtn(\n    {\n        selector: '.js-load-more',\n        hidden: true\n    });\n\n\n\nsearchForm.addEventListener('submit', onSearch)\nloadMoreBtn.btn.addEventListener('click', fetchArticles)\n\n\nfunction onSearch(e) {\n    e.preventDefault();\n\n    searchBtn.disabled = true;\n\n    newsApiService.query = e.currentTarget.elements.query.value;\n\n    if (!newsApiService.query) {\n        return alert('type something');\n    }\n\n    loadMoreBtn.show();\n    newsApiService.resetPage();\n    clearArticlesMarkup(list);\n    fetchArticles();\n\n    \n}\n\n\nfunction fetchArticles() {\n    loadMoreBtn.enableSpinner();\n\n    newsApiService.fetchArticles()\n        .then(articles => {\n            loadMoreBtn.disableSpinner();\n            appendArticlesMarkup(articles, list);\n            searchBtn.disabled = false;\n        })\n        .catch(err => console.log(err));\n}\n\n\n\n// pixabay Infinity scroll\n// const BASE_URL = 'https://pixabay.com/api/';\n// const END_POINT = 'character';\n// const API_KEY = '38382383-be68f6f97c97ff697813dafa9';\n\n// const list = document.querySelector('.js-list');\n// const searchInput = document.querySelector('.js-form');\n// const target = document.querySelector('.js-guard');\n\n// let options = {\n//     // root: document.querySelector(\"#scrollArea\"),\n//     root: null, // слідкуємо за всім\n//     rootMargin: \"300px\",\n//     threshold: 1.0,\n// };\n\n// let observer = new IntersectionObserver(onLoad, options);\n// let page = 1;\n\n// let per_page = 10;\n\n\n// function onLoad(entries, observer) {\n//     entries.forEach(entry => {\n//         if (entry.isIntersecting) {\n//             page += 1;\n\n\n//             fetchImg(query,page, per_page)\n//                 .then(data => {\n\n//                 list.insertAdjacentHTML('beforeend', createMarkup(data.hits));\n//                 const allPages = Math.floor(data.totalHits / per_page);\n                \n//                 observer.observe(target);\n\n//                 if (page === allPages) {\n//                     observer.unobserve(target);\n//                     console.log('noIntersecting');\n//                 }\n//             })\n//             .catch(err => console.log(err));    \n//             }\n//     })\n// }\n\n\n// searchInput.addEventListener('submit', onSearch)\n\n// function onSearch(e) {\n//     list.innerHTML = '';\n\n//     e.preventDefault();\n//     query = e.currentTarget.elements.query.value;\n\n\n//     fetchImg(query,page, per_page)\n//         .then(data => {\n            \n//             list.insertAdjacentHTML('beforeend', createMarkup(data.hits));\n//             observer.observe(target);\n//     })\n//         .catch(err => console.log(err));    \n// }\n\n// function fetchImg(query, page, per_page) {\n//     return fetch(`${BASE_URL}?key=${API_KEY}&q=${query}&page=${page}&per_page=${per_page}`)\n//         .then(resp => {\n//             if (!resp.ok) {\n//                 throw new Error(resp.statusText);\n//             }\n//             return resp.json();\n//         });\n//     }\n\n\n// function createMarkup(arr) {\n//     return arr.map(({largeImageURL, tags}) =>\n//     `\n//         <li>\n//             <img src=\"${largeImageURL}\" alt=\"${tags}\" >\n//         </li>\n//     `).join('')\n// }\n\n\n\n// const BASE_URL = 'https://the-one-api.dev/v2/';\n// const END_POINT = 'character';\n// const API_KEY = 'mFUka-Ja9PG3DOYzlmuz';\n\n// getCharacter().then(data => console.log(data)).catch(err => console.log(err));\n\n\n// function getCharacter() {\n//     const params = new URLSearchParams({\n//         limit: 20,\n//         page: 1,\n//     });\n\n//     const options = {\n//         method: 'GET',\n//         headers: {\n//             Authorization: `Bearer ${API_KEY}`\n//         },\n//     };\n\n//     return fetch(`${BASE_URL}${END_POINT}?${params}`, options).then(resp => {\n//         if(!resp.ok){\n//             throw new Error(resp.statusText);\n//         }\n\n//         return resp.json();\n//     })\n// }\n\n//  <!--Infinity scroll-->\n\n// let counter = 0;\n// document.addEventListener('scroll', onScroll);\n\n// function onScroll() {\n//     counter += 1;\n//     console.log(counter);\n// }\n\n// const API_KEY = '2b1d5bddad210c0186837b235280482c';\n// const BASE_URL = 'https://api.themoviedb.org/3/';\n// const END_POINT = 'movie/upcoming';\n// let currentPage = 1;\n\n// const list = document.querySelector('.js-list');\n\n// const target = document.querySelector('.js-guard');\n\n// let options = {\n//     // root: document.querySelector(\"#scrollArea\"),\n//     root: null, // слідкуємо за всім\n//     rootMargin: \"300px\",\n//     threshold: 1.0,\n// };\n\n// let observer = new IntersectionObserver(onLoad, options);\n\n\n// function onLoad(entries, observer) {\n//     entries.forEach((entry) => {\n//         if (entry.isIntersecting) {\n//             console.log(entries);\n//             currentPage += 1;\n\n//             getTrendingMovies(currentPage)\n//                 .then(data => {\n//                     list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n//                     if (data.page === data.total_pages) {\n//                         observer.unobserve(target);\n//                     }\n//                 })\n//             .catch(err => console.log(err));\n//         }\n//     })\n// }\n    \n\n//     getTrendingMovies()\n//         .then(data => {\n//             list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n//             observer.observe(target);\n//     })\n//     .catch(err => console.log(err));\n\n\n// function getTrendingMovies(page=1) {\n//     return fetch(`${BASE_URL}${END_POINT}?api_key=${API_KEY}&page=${page}`)\n//         .then(resp => {\n//             if (!resp.ok) {\n//                 throw new Error(resp.status);\n//             }\n\n//             return resp.json();\n//         })\n// }\n\n\n// function createMarkup(arr) {\n//     return arr.map(({title, poster_path}) =>\n//     `\n//         <li>\n//             <img src=\"https://image.tmdb.org/t/p/w200/${poster_path}\" alt=\"${title}\">\n//             <h2>${title}</h2>\n//         </li>\n//     `).join('')\n// }\n\n\n\n\n\n// <!--load more btn-->\n// const API_KEY = '2b1d5bddad210c0186837b235280482c';\n// const BASE_URL = 'https://api.themoviedb.org/3/';\n// const END_POINT = 'movie/upcoming';\n\n// const list = document.querySelector('.js-list');\n// const loadMoreBtn = document.querySelector('.js-load-more');\n// let currentPage = 1;\n\n// loadMoreBtn.addEventListener('click', onLoad);\n\n// getTrendingMovies()\n//     .then(data => {\n//         list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n\n//         if (data.page !== data.total_pages) {\n//             loadMoreBtn.hidden = false;\n//         }\n//     })\n//     .catch(err => console.log(err));\n\n\n\n// function onLoad() {\n//     currentPage += 1;\n\n//     getTrendingMovies(currentPage)\n//         .then(data => {\n//             list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n//             if (data.page === data.total_pages) {\n//                 loadMoreBtn.hidden = true;\n//             }\n//     })\n//     .catch(err => console.log(err));\n// }\n\n\n// function getTrendingMovies(page=1) {\n//     return fetch(`${BASE_URL}${END_POINT}?api_key=${API_KEY}&page=${page}`)\n//         .then(resp => {\n//             if (!resp.ok) {\n//                 throw new Error(resp.status);\n//             }\n\n//             return resp.json();\n//         })\n// }\n\n\n// function createMarkup(arr) {\n//     return arr.map(({title, poster_path}) =>\n//     `\n//         <li>\n//             <img src=\"https://image.tmdb.org/t/p/w200/${poster_path}\" alt=\"${title}\">\n//             <h2>${title}</h2>\n//         </li>\n//     `).join('')\n// }\n\n\n\n","    const API_KEY = '27141b92df114a5392b42695bdffaae8';\n    const BASE_URL = 'https://newsapi.org/v2/';\n    const END_POINT = 'everything';\n\nexport default class NewsApiService{\n    constructor() {\n        this.query = '';\n        this.page = 1;\n        this.pageSize = 5;\n    }\n\n    fetchArticles() {\n        // console.log(this);\n        return fetch(`${BASE_URL}${END_POINT}?apiKey=${API_KEY}&q=${this.query}&pageSize=${this.pageSize}&page=${this.page}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(resp.statusText);\n            }\n        return resp.json();\n        }).then(({articles}) => {\n            this.incrementPage();\n\n            return articles;\n        })\n    }\n\n    incrementPage() {\n        this.page += 1;\n    }\n\n    resetPage() {\n        this.page = 1;\n    }\n\n    get searchQuery() {\n        return this.query;\n    }\n\n    set searchQuery(newQuery) {\n        this.query = newQuery;\n    }\n}","export default class LoadMoreBtn{\n    constructor({selector, hidden=false}) {\n        this.btn = document.querySelector(selector);\n        this.label = this.btn.querySelector('.js-spinner-label');\n        this.spinner = this.btn.querySelector('.js-spinner');\n\n        hidden && this.hide();\n\n        // if (hidden) {\n        //     this.hide();\n        // }\n    }\n\n    enableSpinner() {\n        this.spinner.hidden = false;\n        this.label.textContent = 'Loading...';\n        this.btn.disabled = true;\n    }\n\n    disableSpinner() {\n        this.spinner.hidden = true;\n        this.label.textContent = 'Load more...';\n        this.btn.disabled = false;\n    }\n\n    show() {\n        this.btn.hidden = false;\n    }\n\n    hide() {\n        this.btn.hidden = true;\n    }\n}"],"names":["$ebae4e159cce28d1$export$82f4469d68fe05dc","arr","list","markup","map","url","urlToImage","title","author","description","join","insertAdjacentHTML","$1bab9c519cfa82bc$var$list","document","querySelector","$1bab9c519cfa82bc$var$searchForm","$1bab9c519cfa82bc$var$searchBtn","$1bab9c519cfa82bc$var$newsApiService","constructor","this","query","page","pageSize","fetchArticles","fetch","then","resp","ok","Error","statusText","json","articles","incrementPage","resetPage","searchQuery","newQuery","$1bab9c519cfa82bc$var$loadMoreBtn","selector","hidden","btn","label","spinner","hide","enableSpinner","textContent","disabled","disableSpinner","show","$1bab9c519cfa82bc$var$fetchArticles","catch","err","console","log","addEventListener","e","preventDefault","currentTarget","elements","value","alert","innerHTML"],"version":3,"file":"pagination.9aae842a.js.map"}